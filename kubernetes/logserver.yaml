apiVersion: apps/v1
kind: Deployment
metadata:
  creationTimestamp: null
  labels:
    app: gologserver
  name: gologserver
spec:
  replicas: 5
  revisionHistoryLimit: 5
  selector:
    matchLabels:
      app: gologserver
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: gologserver
    spec:
      containers:
      - image: jojii/gologserver:v1.7
        name: gologserver
        volumeMounts:
        - name: config
          mountPath: /app/data/
        env:
        - name: GOLOG_LOG_LEVEL
          value: info
        - name: GOLOG_CONFIG
          value: /app/data/config.yaml
      volumes:
      - name: config
        configMap:
          name: logserverconfig
status: {}
---
apiVersion: v1
kind: Service
metadata:
  creationTimestamp: null
  labels:
    app: gologserver
  name: gologserver
spec:
  ports:
  - name: 9001-80
    port: 9001
    protocol: TCP
    targetPort: 80
  selector:
    app: gologserver
  type: NodePort
  externalIPs:
  - <IP>
status:
  loadBalancer: {}
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  creationTimestamp: null
  name: gologcleanup
  namespace: default
  resourceVersion: "202923"
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 2
  jobTemplate:
    metadata:
      creationTimestamp: null
      name: gologcleanup
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
          - env:
            - name: GOLOG_LOG_LEVEL
              value: debug
            - name: GOLOG_CONFIG
              value: /app/data/config.yaml
            - name: GOLOG_ONLYCLEAN
              value: "true"
            image: jojii/gologserver:v1.7
            imagePullPolicy: IfNotPresent
            name: gologserver
            resources: {}
            terminationMessagePath: /dev/termination-log
            terminationMessagePolicy: File
            volumeMounts:
            - mountPath: /app/data/
              name: config
          dnsPolicy: ClusterFirst
          restartPolicy: OnFailure
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
          - configMap:
              defaultMode: 420
              name: logserverconfig
            name: config
      ttlSecondsAfterFinished: 100
  schedule: '* 0 * * *'
  successfulJobsHistoryLimit: 3
  suspend: false
